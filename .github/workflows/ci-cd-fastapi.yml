name: CI/CD - FastAPI BE

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: comot-api

jobs:
  # ========================================
  # JOB 1: BUILD AND TEST
  # ========================================
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "📦 Installing dependencies from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt not found, installing basic dependencies..."
            pip install fastapi uvicorn psycopg2-binary
          fi

      - name: Check Python syntax
        run: |
          echo "🔍 Checking Python syntax..."
          python -m compileall . -x ".venv|venv|__pycache__|\.git|\.github" || echo "⚠️ Continuing..."

      - name: Test Python files
        run: |
          echo "📝 Testing Python environment..."
          python -c "print('✅ Python environment is working')"
          if [ -f "server.py" ]; then
            echo "✅ Found server.py"
          else
            echo "⚠️ No server.py found"
          fi
          echo "✅ Basic checks completed"

      - name: Check Docker build
        run: |
          if [ -f Dockerfile ]; then
            echo "🐳 Testing Docker build..."
            docker build -t test-comot-api .
            echo "✅ Docker image builds successfully"
            docker rmi test-comot-api || true
          else
            echo "⚠️ Dockerfile not found"
          fi

  # ========================================
  # JOB 2: DEPLOY TO VPS
  # ========================================
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 300s
          script: |
            echo "🚀 Starting deployment process..."

            # Clean directory
            rm -rf ~/apps/comot-in
            mkdir -p ~/apps/comot-in
            cd ~/apps/comot-in

            # Clone repository
            echo "📥 Cloning repository..."
            git clone https://github.com/${{ github.repository }} .

            # Handle Dockerfile naming
            if [ -f "dockerfile" ] && [ ! -f "Dockerfile" ]; then
              echo "📝 Renaming dockerfile to Dockerfile..."
              mv dockerfile Dockerfile
            fi

            if [ ! -f "Dockerfile" ]; then
              echo "❌ Dockerfile not found"
              ls -la
              exit 1
            fi

            # Create requirements with PostgreSQL support
            if [ ! -f "requirements.txt" ]; then
              echo "📝 Creating requirements.txt..."
              cat > requirements.txt << 'EOF'
            fastapi==0.104.1
            uvicorn[standard]==0.24.0
            pydantic==2.5.0
            sqlalchemy==1.4.23
            psycopg2-binary==2.9.7
            python-multipart==0.0.6
            python-jose[cryptography]==3.3.0
            passlib[bcrypt]==1.7.4
            EOF
            fi

            # Stop existing container
            docker stop comot-api 2>/dev/null || true
            docker rm comot-api 2>/dev/null || true

            # Build image
            echo "🔨 Building Docker image..."
            docker build -t comot-api:latest . || {
              echo "❌ Docker build failed"
              exit 1
            }

            # Create .env file exactly like your local version
            echo "📝 Creating .env file..."
            cat > .env << 'EOF'
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

            URL=${{ secrets.URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            NODE_API_BASE=${{ secrets.NODE_API_BASE }}
            EOF

            # Run container
            echo "▶️ Starting container..."
            docker run -d \
              --name comot-api \
              --env-file .env \
              -p 9000:9000 \
              --restart unless-stopped \
              --memory=512m \
              --cpus=1.0 \
              comot-api:latest || {
              echo "❌ Failed to start container"
              docker logs comot-api --tail 30
              exit 1
            }

            # Wait for startup
            echo "⏳ Waiting for application startup..."
            sleep 25

            # Health check
            echo "🏥 Performing health check..."
            for i in {1..8}; do
              if curl -f -s http://localhost:9000/health >/dev/null 2>&1; then
                echo "✅ Health check passed!"
                break
              elif curl -f -s http://localhost:9000/ >/dev/null 2>&1; then
                echo "✅ Root endpoint responding!"
                break
              else
                echo "⏳ Health check attempt $i failed, retrying..."
                sleep 10
              fi
              
              if [ $i -eq 8 ]; then
                echo "❌ Health check failed after 8 attempts"
                echo "📋 Container logs:"
                docker logs comot-api --tail 40
                echo "📊 Container status:"
                docker ps -a | grep comot-api
                exit 1
              fi
            done

            # Clean up env file for security
            rm -f .env

            echo "🎉 Deployment successful!"
            echo "🌐 API accessible at: http://${{ secrets.VPS_HOST }}:9000"

  # ========================================
  # JOB 3: NOTIFICATION
  # ========================================
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 FastAPI is live at http://${{ secrets.VPS_HOST }}:9000"
          else
            echo "❌ Deployment failed!"
          fi
