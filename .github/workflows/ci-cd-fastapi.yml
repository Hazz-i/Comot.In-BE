name: CI/CD - FastAPI BE

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # ========================================
  # JOB 1: BUILD AND TEST
  # ========================================
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install fastapi uvicorn psycopg2-binary sqlalchemy python-dotenv
          fi

      - name: Test Docker build
        run: |
          if [ -f Dockerfile ]; then
            docker build -t test-comot-api .
            docker rmi test-comot-api || true
          fi

  # ========================================
  # JOB 2: DEPLOY TO VPS
  # ========================================
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 300s
          script: |
            echo "🚀 Starting deployment process..."

            # Setup directory - DON'T remove if exists
            mkdir -p ~/apps/comot-in
            cd ~/apps/comot-in

            # Check if .env already exists
            if [ -f ".env" ]; then
              echo "✅ Found existing .env file, preserving it"
              echo "📋 Current .env content (masked):"
              cat .env | sed 's/=.*$/=***MASKED***/'
            else
              echo "📝 Creating new .env file..."
              cat > .env << 'EOF'
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            URL=${{ secrets.URL }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}
            JWT_ALGORITHM=HS256
            JWT_EXPIRE_HOURS=24
            NODE_API_BASE=${{ secrets.NODE_API_BASE }}
            EOF
              echo "✅ .env file created"
            fi

            # Update source code
            echo "📥 Updating source code..."
            if [ -d ".git" ]; then
              echo "📥 Pulling latest changes..."
              git fetch origin
              git reset --hard origin/master
            else
              echo "📥 Cloning repository..."
              rm -rf * .[^.]* 2>/dev/null || true
              git clone https://github.com/${{ github.repository }} .
              # Restore .env after clone
              if [ -f "../.env.backup" ]; then
                mv ../.env.backup .env
              fi
            fi

            # Backup .env if we're going to clone
            if [ -f ".env" ] && [ ! -d ".git" ]; then
              cp .env ../.env.backup
            fi

            # Handle Dockerfile
            if [ -f "dockerfile" ] && [ ! -f "Dockerfile" ]; then
              mv dockerfile Dockerfile
            fi

            # Create requirements.txt if missing
            if [ ! -f "requirements.txt" ]; then
              echo "📝 Creating requirements.txt..."
              cat > requirements.txt << 'EOF'
            fastapi==0.104.1
            uvicorn[standard]==0.24.0
            pydantic==2.5.0
            sqlalchemy==1.4.23
            psycopg2-binary==2.9.7
            python-multipart==0.0.6
            python-jose[cryptography]==3.3.0
            passlib[bcrypt]==1.7.4
            python-dotenv==1.0.0
            EOF
            fi

            # Stop and remove existing container
            echo "🛑 Stopping existing container..."
            docker stop comot-api 2>/dev/null || echo "No container to stop"
            docker rm comot-api 2>/dev/null || echo "No container to remove"

            # Build new image
            echo "🔨 Building Docker image..."
            docker build -t comot-api:latest . || {
              echo "❌ Docker build failed"
              exit 1
            }

            # Test environment variables before starting
            echo "🔍 Testing environment variables..."
            docker run --env-file .env --rm comot-api:latest python -c "
            import os
            from dotenv import load_dotenv
            load_dotenv()
            
            host = os.getenv('POSTGRES_HOST', 'NOT_SET')
            user = os.getenv('POSTGRES_USER', 'NOT_SET')
            
            if host == 'NOT_SET' or host == '***':
                print('❌ POSTGRES_HOST not properly set:', repr(host))
                exit(1)
            if user == 'NOT_SET' or user == '***':
                print('❌ POSTGRES_USER not properly set:', repr(user))
                exit(1)
                
            print('✅ Environment variables validated')
            print('Host:', host[:20] + '...' if len(host) > 20 else host)
            print('User:', user[:10] + '***' if len(user) > 10 else user)
            " || {
              echo "❌ Environment validation failed"
              exit 1
            }

            # Start container
            echo "▶️ Starting container..."
            docker run -d \
              --name comot-api \
              --env-file .env \
              -p 9000:9000 \
              --restart unless-stopped \
              --memory=512m \
              --cpus=1.0 \
              comot-api:latest || {
              echo "❌ Failed to start container"
              docker logs comot-api --tail 30
              exit 1
            }

            # Wait and health check
            echo "⏳ Waiting for startup (15 seconds)..."
            sleep 15

            # Simple health check
            echo "🏥 Health check..."
            for i in {1..10}; do
              if docker ps | grep comot-api | grep -q "Up"; then
                if curl -f -s http://localhost:9000/ >/dev/null 2>&1; then
                  echo "✅ Application is responding!"
                  break
                else
                  echo "⏳ Attempt $i: Application not responding yet..."
                fi
              else
                echo "❌ Container not running"
                docker logs comot-api --tail 10
                exit 1
              fi
              
              if [ $i -eq 10 ]; then
                echo "❌ Health check timeout"
                echo "📋 Container logs:"
                docker logs comot-api --tail 30
                exit 1
              fi
              
              sleep 10
            done

            # Test additional endpoints if available
            curl -s http://localhost:9000/health >/dev/null 2>&1 && echo "✅ Health endpoint OK" || echo "⚠️ Health endpoint not available"
            curl -s http://localhost:9000/db-test >/dev/null 2>&1 && echo "✅ DB test endpoint OK" || echo "⚠️ DB test endpoint not available"

            echo "🎉 Deployment successful!"
            echo "🌐 API accessible at: http://${{ secrets.VPS_HOST }}:9000"
            echo "📊 Container status:"
            docker ps | grep comot-api

  # ========================================
  # JOB 3: NOTIFICATION
  # ========================================
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 FastAPI is live at http://${{ secrets.VPS_HOST }}:9000"
          else
            echo "❌ Deployment failed!"
          fi
