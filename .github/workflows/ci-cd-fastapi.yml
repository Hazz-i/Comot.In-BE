name: CI/CD - FastAPI BE

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: comot-api

jobs:
  # ========================================
  # JOB 1: BUILD AND TEST
  # ========================================
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "📦 Installing dependencies from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt not found, installing basic dependencies..."
            pip install fastapi uvicorn psycopg2-binary
          fi

      - name: Check Python syntax
        run: |
          echo "🔍 Checking Python syntax..."
          python -m compileall . -x ".venv|venv|__pycache__|\.git|\.github" || echo "⚠️ Continuing..."

      - name: Test Python files
        run: |
          echo "📝 Testing Python environment..."
          python -c "print('✅ Python environment is working')"
          if [ -f "server.py" ]; then
            echo "✅ Found server.py"
          else
            echo "⚠️ No server.py found"
          fi
          echo "✅ Basic checks completed"

      - name: Check Docker build
        run: |
          if [ -f Dockerfile ]; then
            echo "🐳 Testing Docker build..."
            docker build -t test-comot-api .
            echo "✅ Docker image builds successfully"
            docker rmi test-comot-api || true
          else
            echo "⚠️ Dockerfile not found"
          fi

  # ========================================
  # JOB 2: DEPLOY TO VPS
  # ========================================
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 300s
          script: |
            echo "🚀 Starting deployment process..."

            # Clean directory
            rm -rf ~/apps/comot-in
            mkdir -p ~/apps/comot-in
            cd ~/apps/comot-in

            # Clone repository
            echo "📥 Cloning repository..."
            git clone https://github.com/${{ github.repository }} .

            # Handle Dockerfile naming
            if [ -f "dockerfile" ] && [ ! -f "Dockerfile" ]; then
              echo "📝 Renaming dockerfile to Dockerfile..."
              mv dockerfile Dockerfile
            fi

            if [ ! -f "Dockerfile" ]; then
              echo "❌ Dockerfile not found"
              ls -la
              exit 1
            fi

            # Create requirements with PostgreSQL support
            if [ ! -f "requirements.txt" ]; then
              echo "📝 Creating requirements.txt..."
              cat > requirements.txt << 'EOF'
            fastapi==0.104.1
            uvicorn[standard]==0.24.0
            pydantic==2.5.0
            sqlalchemy==1.4.23
            psycopg2-binary==2.9.7
            python-multipart==0.0.6
            python-jose[cryptography]==3.3.0
            passlib[bcrypt]==1.7.4
            EOF
            fi

            # Stop existing container
            docker stop comot-api 2>/dev/null || true
            docker rm comot-api 2>/dev/null || true

            # Build image
            echo "🔨 Building Docker image..."
            docker build -t comot-api:latest . || {
              echo "❌ Docker build failed"
              exit 1
            }

            # Create .env file with exact same format as local
            echo "📝 Creating .env file..."
            cat > .env << 'EOF'
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

            URL=${{ secrets.URL }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}
            JWT_ALGORITHM=HS256
            JWT_EXPIRE_HOURS=24

            NODE_API_BASE=${{ secrets.NODE_API_BASE }}
            EOF

            # Verify .env file content (show exact structure)
            echo "🔍 Environment file verification:"
            echo "File size: $(wc -c < .env) bytes"
            echo "Line count: $(wc -l < .env)"
            echo "Non-empty lines: $(grep -c . .env)"
            echo "Sample lines (masked):"
            head -3 .env | sed 's/=.*$/=***MASKED***/'

            # Test if file is properly formatted
            if grep -q "POSTGRES_HOST=" .env && grep -q "POSTGRES_USER=" .env; then
              echo "✅ Required environment variables found in .env"
            else
              echo "❌ Missing required environment variables in .env"
              echo "Actual content:"
              cat .env
              exit 1
            fi

            # Debug environment variables
            echo "🔍 Debugging environment setup..."
            echo "Environment file contents (masked):"
            cat .env | sed 's/=.*$/=***MASKED***/'
            echo "Container environment check:"
            docker run --env-file .env --rm comot-api:latest python -c "
            import os
            print('POSTGRES_HOST:', os.getenv('POSTGRES_HOST', 'NOT_SET'))
            print('POSTGRES_PORT:', os.getenv('POSTGRES_PORT', 'NOT_SET'))
            print('POSTGRES_USER:', os.getenv('POSTGRES_USER', 'NOT_SET')[:10] + '***' if os.getenv('POSTGRES_USER') else 'NOT_SET')
            print('DATABASE_URL constructed successfully')
            " || echo "Environment test failed"

            # Run container
            echo "▶️ Starting container..."
            docker run -d \
              --name comot-api \
              --env-file .env \
              -p 9000:9000 \
              --restart unless-stopped \
              --memory=512m \
              --cpus=1.0 \
              comot-api:latest || {
              echo "❌ Failed to start container"
              docker logs comot-api --tail 30
              exit 1
            }

            # Wait for startup
            echo "⏳ Waiting for application startup..."
            sleep 25

            # Health check
            echo "🏥 Performing comprehensive health check..."
            for i in {1..15}; do
              # Check if container is still running
              if ! docker ps | grep comot-api >/dev/null; then
                echo "❌ Container stopped unexpectedly on attempt $i"
                docker logs comot-api --tail 20
                sleep 10
                continue
              fi
              
              # Test root endpoint first
              if curl -f -s http://localhost:9000/ >/dev/null 2>&1; then
                echo "✅ Root endpoint responding!"
                
                # Test health endpoint
                if curl -f -s http://localhost:9000/health >/dev/null 2>&1; then
                  echo "✅ Health endpoint passed!"
                  
                  # Test database connectivity
                  DB_RESPONSE=$(curl -s http://localhost:9000/db-test 2>/dev/null || echo '{"status":"error"}')
                  DB_STATUS=$(echo "$DB_RESPONSE" | grep -o '"status":"[^"]*"' | cut -d'"' -f4 || echo "unknown")
                  echo "🗄️ Database status: $DB_STATUS"
                  
                  if [ "$DB_STATUS" = "connected" ]; then
                    echo "✅ Database connection successful!"
                    break
                  else
                    echo "⚠️ Database connection failed, but API is running"
                    echo "📋 DB Response: $DB_RESPONSE"
                  fi
                fi
                break
              else
                echo "⏳ Health check attempt $i failed, retrying..."
                if [ $i -eq 5 ]; then
                  echo "📋 Container logs (mid-check):"
                  docker logs comot-api --tail 20
                fi
                sleep 20
              fi
              
              if [ $i -eq 15 ]; then
                echo "❌ Health check failed after 15 attempts"
                echo "📋 Final container logs:"
                docker logs comot-api --tail 50
                echo "📊 Container status:"
                docker ps -a | grep comot-api
                echo "📊 Environment variables in container:"
                docker exec comot-api env | grep POSTGRES || echo "No POSTGRES vars found"
                echo "📊 Network test:"
                docker exec comot-api ping -c 3 aws-0-us-east-2.pooler.supabase.com || echo "Cannot reach database host"
                exit 1
              fi
            done

            # Clean up env file for security
            rm -f .env

            echo "🎉 Deployment successful!"
            echo "🌐 API accessible at: http://${{ secrets.VPS_HOST }}:9000"

  # ========================================
  # JOB 3: NOTIFICATION
  # ========================================
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 FastAPI is live at http://${{ secrets.VPS_HOST }}:9000"
          else
            echo "❌ Deployment failed!"
          fi
