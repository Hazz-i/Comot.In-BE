name: CI/CD - FastAPI BE

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # ========================================
  # JOB 1: BUILD AND TEST
  # ========================================
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "📦 Installing dependencies from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt not found, installing basic dependencies..."
            pip install fastapi uvicorn psycopg2-binary
          fi

      - name: Check Docker build
        run: |
          if [ -f Dockerfile ]; then
            echo "🐳 Testing Docker build..."
            docker build -t test-comot-api .
            echo "✅ Docker image builds successfully"
            docker rmi test-comot-api || true
          else
            echo "⚠️ Dockerfile not found"
          fi

  # ========================================
  # JOB 2: DEPLOY TO VPS
  # ========================================
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 300s
          script: |
            echo "🚀 Starting deployment process..."

            # Navigate to target directory
            cd ~/apps/comot-in || {
              echo "❌ Directory ~/apps/comot-in does not exist!"
              echo "❌ Current location: $(pwd)"
              echo "❌ Available directories in ~/apps/:"
              ls -la ~/apps/ || echo "~/apps/ does not exist"
              exit 1
            }

            # Check if .env exists
            if [ ! -f ".env" ]; then
              echo "❌ .env file not found in ~/apps/comot-in/"
              echo "❌ Current directory contents:"
              ls -la
              exit 1
            fi

            echo "✅ Found .env file, preserving it"
            echo "📋 Current .env structure:"
            cat .env | sed 's/=.*$/=***MASKED***/'

            # Update source code via git clone (preserve .env)
            echo "📥 Updating source code..."

            # Backup .env
            cp .env .env.backup

            # Remove all files except .env
            find . -not -name '.env*' -not -name '.' -not -name '..' -delete 2>/dev/null || true

            # Clone fresh code
            git clone https://github.com/${{ github.repository }} temp_repo

            # Move files from temp_repo to current directory
            mv temp_repo/* . 2>/dev/null || true
            mv temp_repo/.[^.]* . 2>/dev/null || true
            rm -rf temp_repo

            # Restore .env
            mv .env.backup .env

            echo "✅ Source code updated, .env preserved"

            # Handle Dockerfile naming
            if [ -f "dockerfile" ] && [ ! -f "Dockerfile" ]; then
              echo "📝 Renaming dockerfile to Dockerfile..."
              mv dockerfile Dockerfile
            fi

            if [ ! -f "Dockerfile" ]; then
              echo "❌ Dockerfile not found after clone"
              ls -la
              exit 1
            fi

            # Check existing Docker containers and images
            echo "🐳 Checking existing Docker containers and images..."

            # Stop container if running
            if docker ps | grep -q comot-api; then
              echo "🛑 Stopping running comot-api container..."
              docker stop comot-api
            else
              echo "ℹ️ No running comot-api container found"
            fi

            # Remove container if exists
            if docker ps -a | grep -q comot-api; then
              echo "🗑️ Removing comot-api container..."
              docker rm comot-api
            else
              echo "ℹ️ No comot-api container to remove"
            fi

            # Remove image if exists
            if docker images | grep -q comot-api; then
              echo "🗑️ Removing comot-api:latest image..."
              docker rmi comot-api:latest || echo "⚠️ Could not remove image, continuing..."
            else
              echo "ℹ️ No comot-api:latest image to remove"
            fi

            # Build new Docker image
            echo "🔨 Building new Docker image comot-api:latest..."
            docker build -t comot-api:latest . || {
              echo "❌ Docker build failed"
              echo "📋 Build context contents:"
              ls -la
              exit 1
            }

            echo "✅ Docker image built successfully"

            # Run container with .env file
            echo "▶️ Starting container with command:"
            echo "docker run -d --name comot-api --env-file .env -p 9000:9000 --restart unless-stopped --memory=512m --cpus=1.0 comot-api:latest"

            docker run -d \
              --name comot-api \
              --env-file .env \
              -p 9000:9000 \
              --restart unless-stopped \
              --memory=512m \
              --cpus=1.0 \
              comot-api:latest || {
              echo "❌ Failed to start container"
              echo "📋 Container logs:"
              docker logs comot-api --tail 30 2>/dev/null || echo "No logs available"
              exit 1
            }

            # Wait for startup
            echo "⏳ Waiting for application startup (15 seconds)..."
            sleep 15

            # Simple health check
            echo "🏥 Performing health check..."

            # Check if container is running
            if docker ps | grep -q comot-api; then
              echo "✅ Container is running"
              
              # Test if port 9000 is responding
              if curl -f -s http://localhost:9000/ >/dev/null 2>&1; then
                echo "✅ Application is responding on port 9000"
                echo "🎉 Deployment successful!"
              else
                echo "⚠️ Application not responding yet, but container is running"
                echo "📋 Container logs:"
                docker logs comot-api --tail 20
                echo "🎉 Deployment completed - check logs for details"
              fi
            else
              echo "❌ Container is not running"
              echo "📋 Container logs:"
              docker logs comot-api --tail 30 2>/dev/null || echo "No logs available"
              echo "📊 Container status:"
              docker ps -a | grep comot-api || echo "No comot-api container found"
              exit 1
            fi

            echo "🌐 API should be accessible at: http://${{ secrets.VPS_HOST }}:9000"
            echo "📊 Final container status:"
            docker ps | grep comot-api

  # ========================================
  # JOB 3: NOTIFICATION
  # ========================================
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 FastAPI is live at http://${{ secrets.VPS_HOST }}:9000"
          else
            echo "❌ Deployment failed!"
            echo "💡 Make sure directory ~/apps/comot-in exists and contains .env file"
          fi
