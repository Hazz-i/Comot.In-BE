name: CI/CD - FastAPI BE

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: comot-api

jobs:
  # ========================================
  # JOB 1: BUILD AND TEST
  # ========================================
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            echo "üì¶ Installing dependencies from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è requirements.txt not found, installing basic dependencies..."
            pip install fastapi uvicorn
          fi

      - name: Check Python syntax
        run: |
          echo "üîç Checking Python syntax..."
          python -m compileall . -x ".venv|venv|__pycache__|\.git|\.github" || echo "‚ö†Ô∏è Some syntax issues found, but continuing..."

      - name: Run code linting
        run: |
          echo "üîç Running code linting..."
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git,.github || echo "‚ö†Ô∏è Linting issues found"
        continue-on-error: true

      - name: Test Python files
        run: |
          echo "üìù Testing Python environment..."

          # Set environment variables to avoid None errors
          export PORT=9000
          export ENVIRONMENT=test

          # List Python files
          echo "üìÅ Python files found:"
          find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | head -5

          # Test Python environment
          python -c "
          import os
          import sys
          print('‚úÖ Python environment is working')
          print('üìÅ Current directory:', os.getcwd())
          print('üêç Python version:', sys.version.split()[0])
          "

          # Check main files
          if [ -f "server.py" ]; then
            echo "‚úÖ Found server.py"
          elif [ -f "main.py" ]; then
            echo "‚úÖ Found main.py"
          elif [ -f "app.py" ]; then
            echo "‚úÖ Found app.py"
          else
            echo "‚ö†Ô∏è No main Python file found"
          fi

          echo "‚úÖ Basic checks completed"

      - name: Check Docker build
        run: |
          if [ -f Dockerfile ]; then
            echo "üê≥ Testing Docker build..."
            docker build -t test-comot-api . || {
              echo "‚ùå Docker build failed"
              exit 1
            }
            echo "‚úÖ Docker image builds successfully"
            docker rmi test-comot-api || true
          else
            echo "‚ö†Ô∏è Dockerfile not found, skipping Docker build test"
          fi

  # ========================================
  # JOB 2: DEPLOY TO VPS
  # ========================================
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 300s
          script: |
            echo "üöÄ Starting deployment process..."

            # Clean up and prepare directory
            if [ -d "~/apps/comot-in" ]; then
              echo "üóëÔ∏è Cleaning existing directory..."
              rm -rf ~/apps/comot-in
            fi

            # Create fresh directory and clone
            echo "üìÅ Creating application directory..."
            mkdir -p ~/apps/comot-in
            cd ~/apps/comot-in

            # Clone repository
            echo "üì• Cloning repository..."
            git clone https://github.com/${{ github.repository }} .

            # Check for Dockerfile (case insensitive)
            if [ -f "dockerfile" ] && [ ! -f "Dockerfile" ]; then
              echo "üìù Renaming dockerfile to Dockerfile..."
              mv dockerfile Dockerfile
            fi

            # Verify required files exist
            if [ ! -f "Dockerfile" ]; then
              echo "‚ùå Dockerfile not found in repository"
              echo "üìÅ Files in directory:"
              ls -la
              exit 1
            fi

            echo "‚úÖ Dockerfile found"

            # Check requirements.txt
            if [ ! -f "requirements.txt" ]; then
              echo "üìù Creating basic requirements.txt..."
              cat > requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6
EOF
            fi

            # Backup current image if exists
            if docker images -q comot-api:latest >/dev/null 2>&1; then
              echo "üíæ Creating backup of current image..."
              docker tag comot-api:latest comot-api:backup || true
            fi

            # Stop and remove existing container
            echo "üõë Stopping existing container..."
            docker stop comot-api 2>/dev/null || echo "Container not running"
            docker rm comot-api 2>/dev/null || echo "Container not found"

            # Build new image with verbose output
            echo "üî® Building new Docker image..."
            docker build -t comot-api:latest . --no-cache || {
              echo "‚ùå Docker build failed"
              echo "üìã Build context files:"
              ls -la
              echo "üìã Dockerfile content:"
              cat Dockerfile
              exit 1
            }

            echo "‚úÖ Docker image built successfully"

            # Create .env file
            echo "üìù Creating .env file..."
            cat > .env << 'EOF'
PORT=9000
ENVIRONMENT=production
EOF

            # Run new container
            echo "‚ñ∂Ô∏è Starting new container on port 9000..."
            docker run -d \
              --name comot-api \
              --env-file .env \
              -p 9000:9000 \
              --restart unless-stopped \
              --memory=512m \
              --cpus=1.0 \
              comot-api:latest || {
              echo "‚ùå Failed to start container"
              echo "üìã Container logs:"
              docker logs comot-api 2>/dev/null || true
              exit 1
            }

            # Wait for startup
            echo "‚è≥ Waiting for application startup..."
            sleep 20

            # Health check
            echo "üè• Performing health check..."
            for i in {1..10}; do
              if curl -f -s http://localhost:9000/ >/dev/null 2>&1; then
                echo "‚úÖ Health check passed - Server responding on port 9000"
                break
              elif docker ps | grep comot-api >/dev/null; then
                echo "‚è≥ Container running, waiting for app startup (attempt $i)..."
                sleep 5
              else
                echo "‚ùå Container stopped unexpectedly"
                echo "üìã Container logs:"
                docker logs comot-api --tail 30
                exit 1
              fi
              
              if [ $i -eq 10 ]; then
                echo "‚ùå Health check failed after 10 attempts"
                echo "üìã Container logs:"
                docker logs comot-api --tail 50
                echo "üìä Container status:"
                docker ps -a | grep comot-api
                echo "üìä Port check:"
                netstat -tlnp | grep :9000 || echo "Port 9000 not listening"
                exit 1
              fi
            done

            # Final status
            echo "üìä Deployment Status:"
            docker ps | grep comot-api
            echo ""
            echo "üåê API is now accessible at:"
            echo "  - Base URL: http://${{ secrets.VPS_HOST }}:9000"
            if curl -s http://localhost:9000/docs >/dev/null 2>&1; then
              echo "  - Documentation: http://${{ secrets.VPS_HOST }}:9000/docs"
            fi
            echo ""
            echo "üéâ Deployment completed successfully!"

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "üîÑ Deployment failed! Attempting rollback..."

            # Stop failed container
            docker stop comot-api 2>/dev/null || true
            docker rm comot-api 2>/dev/null || true

            # Rollback to backup
            if docker images -q comot-api:backup >/dev/null 2>&1; then
              echo "üîÑ Rolling back to previous version..."
              docker run -d \
                --name comot-api \
                --env-file ~/apps/comot-in/.env \
                -p 9000:9000 \
                --restart unless-stopped \
                comot-api:backup
              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup image available"
            fi

  # ========================================
  # JOB 3: NOTIFICATION
  # ========================================
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê FastAPI is live at http://${{ secrets.VPS_HOST }}:9000"
            echo "üìñ API docs at http://${{ secrets.VPS_HOST }}:9000/docs"
          else
            echo "‚ùå Deployment failed!"
            echo "Check logs for details"
          fi
